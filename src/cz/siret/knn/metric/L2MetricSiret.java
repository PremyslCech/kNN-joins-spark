package cz.siret.knn.metric;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import cz.siret.knn.model.Feature;

@SuppressWarnings("serial")
public class L2MetricSiret extends IMetric {

	@Override
	public float dist(Object o1, Object o2) throws IOException {
		numOfDistComp++;

		if (o1 instanceof Feature && o2 instanceof Feature) {
			Feature f1 = (Feature) o1;
			Feature f2 = (Feature) o2;

			if (f1.getOtherBinsValue() != 0 || f2.getOtherBinsValue() != 0) {
				return distInner(f1, f2);
			}

			double result = 0f, val = 0f;
			int[] histKeys1 = f1.getKeys();
			float[] histValues1 = f1.getValues();
			int[] histKeys2 = f2.getKeys();
			float[] histValues2 = f2.getValues();

			int i = 0, ii = histKeys1.length;
			int j = 0, jj = histKeys2.length;

			while (ii > i && jj > j) {
				if (histKeys1[i] == histKeys2[j]) {
					val = histValues1[i] - histValues2[j];
					result += val * val;
					i++;
					j++;
				} else {
					if (histKeys1[i] < histKeys2[j]) {
						val = histValues1[i];
						result += val * val;
						i++;
					} else {
						val = histValues2[j];
						result += val * val;
						j++;
					}
				}
			}

			if (ii > i) {
				for (int x = i; x < ii; x++) {
					val = histValues1[x];
					result += val * val;
				}
			}

			if (jj > j) {
				for (int x = j; x < jj; x++) {
					val = histValues2[x];
					result += val * val;
				}
			}

			return (float) Math.sqrt(result);
		} else {
			throw new IOException("The input objects must be the type of FeatureWritable!");
		}
	}

	private float distInner(Feature f1, Feature f2) throws IOException {

		double result = 0, val = 0;
		int[] histKeys1 = f1.getKeys();
		float[] histValues1 = f1.getValues();
		int[] histKeys2 = f2.getKeys();
		float[] histValues2 = f2.getValues();
		double otherValues1 = f1.getOtherBinsValue();
		double otherValues2 = f2.getOtherBinsValue();

		int f1Key = histKeys1[histKeys1.length - 1];
		int f2Key = histKeys2[histKeys2.length - 1];
		if (f1Key != f2Key) {
			throw new IOException("Dimensions of features (" + f1Key + ", " + f2Key + ") are not equal!");
		}

		int i = 0, ii = histKeys1.length;
		int j = 0, jj = histKeys2.length;
		int numberOfUsedDims = 0;

		while (ii > i && jj > j) {
			if (histKeys1[i] == histKeys2[j]) {
				val = histValues1[i] - histValues2[j];
				result += val * val;
				i++;
				j++;
			} else {
				if (histKeys1[i] < histKeys2[j]) {
					val = histValues1[i] - otherValues2;
					result += val * val;
					i++;
				} else {
					val = histValues2[j] - otherValues1;
					result += val * val;
					j++;
				}
			}

			numberOfUsedDims++;
		}

		if (ii > i) {
			for (int x = i; x < ii; x++) {
				val = histValues1[x] - otherValues2;
				result += val * val;
				numberOfUsedDims++;
			}
		}

		if (jj > j) {
			for (int x = j; x < jj; x++) {
				val = histValues2[x] - otherValues1;
				result += val * val;
				numberOfUsedDims++;
			}
		}

		// f1Key = f2Key = number of dimensions - 1
		val = otherValues1 - otherValues2;
		result += (f1Key - numberOfUsedDims + 1) * val * val;

		return (float) Math.sqrt(result);
	}

	@Override
	public long getNumOfDistComp() {
		return numOfDistComp;
	}

	/*
	 * For performance tests
	 */
	public static void main(String[] args) throws Exception {

		// PerformanceTest();
		PerformanceTest2();
		// L2Test();
	}

	private static void PerformanceTest2() throws Exception {

		List<Feature> features = new ArrayList<>();
		try (BufferedReader br = new BufferedReader(new FileReader("c:\\Users\\Premek\\Downloads\\train"))) {
			for (String line; (line = br.readLine()) != null;) {
				features.add(Feature.parse(line));
			}
		}

		IMetric l2MetricSiret = new L2MetricSiret();
		long begin = System.currentTimeMillis();
		for (int i = 0; i < features.size(); i++) {
			for (int j = i + 1; j < features.size(); j++) {

				try {
					float dist = l2MetricSiret.dist(features.get(i), features.get(j));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		long end = System.currentTimeMillis();
		double second = (end - begin) / 1000d;
		System.out.println(l2MetricSiret.numOfDistComp + " distance computations takes " + second);
	}

	private static void L2Test() {

		final String feature1String = "1_10384;0;0.0014858841;0:0.001789;1:0.002418;2:0.001497;3:0.005017;4:0.001541;6:0.001724;7:0.001537;8:0.001541;9:0.001486;10:0.001648;11:0.001795;12:0.001719;14:0.001486;15:0.001509;16:0.001486;17:0.001523;18:0.001891;19:0.001486;20:0.002354;21:0.001657;22:0.002538;24:0.001486;25:0.001486;26:0.001812;27:0.007728;28:0.002203;29:0.008332;30:0.001502;31:0.002476;32:0.001764;33:0.001486;35:0.001624;36:0.001650;37:0.001486;39:0.001877;40:0.001486;41:0.004833;42:0.001815;43:0.001486;44:0.001506;45:0.001913;46:0.001486;47:0.001486;49:0.002905;50:0.001486;51:0.001486;52:0.002228;53:0.004274;54:0.002069;55:0.001509;56:0.001486;57:0.005344;58:0.001727;59:0.002678;60:0.001820;61:0.001946;62:0.001490;64:0.001743;65:0.002770;66:0.003494;67:0.001516;68:0.003829;69:0.001486;70:0.006821;71:0.001513;72:0.001652;74:0.001868;75:0.002355;76:0.002084;77:0.001605;78:0.001553;79:0.001502;80:0.001645;81:0.001510;82:0.001693;83:0.001595;84:0.001520;85:0.001780;86:0.001508;87:0.001486;88:0.002422;89:0.001492;90:0.002023;91:0.004040;93:0.001486;94:0.001567;95:0.002719;97:0.002568;98:0.001530;99:0.001949;101:0.001519;102:0.001492;103:0.002757;104:0.001562;105:0.001486;106:0.001486;107:0.001493;109:0.008163;110:0.001488;111:0.004008;112:0.001529;114:0.002056;116:0.001494;117:0.001509;118:0.001631;119:0.001544;120:0.001506;121:0.001514;122:0.001486;124:0.001486;127:0.001486;130:0.001486;132:0.001490;139:0.001486;142:0.001486;144:0.001486;145:0.001486;149:0.002078;152:0.002880;153:0.001486;155:0.001486;156:0.005919;158:0.001486;159:0.002018;160:0.001486;161:0.001486;162:0.001486;164:0.001486;169:0.002127;170:0.001486;171:0.001486;173:0.001486;175:0.001486;179:0.001488;181:0.001486;185:0.001486;187:0.001486;189:0.001486;195:0.001496;201:0.001486;203:0.001486;210:0.001486;227:0.001486;229:0.001486;230:0.001487;231:0.001487;232:0.001486;233:0.001486;236:0.002732;237:0.001486;244:0.001486;245:0.001486;251:0.003222;253:0.001486;255:0.001486;258:0.001492;260:0.001490;263:0.001486;264:0.001486;265:0.001768;266:0.001486;271:0.001486;274:0.001486;285:0.001486;288:0.001486;290:0.001518;293:0.001486;294:0.001486;298:0.001619;300:0.001486;307:0.001486;312:0.001486;314:0.001486;315:0.002723;319:0.001486;321:0.001487;323:0.002411;326:0.001489;329:0.001487;330:0.001486;333:0.001486;337:0.001487;340:0.001486;342:0.001764;343:0.001486;345:0.001866;348:0.001486;356:0.001486;358:0.001486;361:0.001486;365:0.001486;366:0.001487;367:0.001486;368:0.001486;370:0.001486;371:0.001486;375:0.001511;383:0.001486;386:0.001494;390:0.001486;395:0.001486;397:0.001486;398:0.001486;403:0.001487;405:0.001486;408:0.001486;410:0.005672;413:0.001486;420:0.001486;422:0.001486;423:0.001486;424:0.001584;425:0.002225;428:0.001486;430:0.001486;431:0.001486;432:0.001486;438:0.001486;439:0.001486;440:0.001486;444:0.001486;449:0.001527;453:0.001486;455:0.002275;458:0.002610;460:0.001486;463:0.001883;466:0.001486;467:0.001486;469:0.001486;470:0.001486;472:0.001486;473:0.001486;476:0.001488;481:0.001486;483:0.001486;486:0.001486;488:0.001486;489:0.001486;490:0.001496;497:0.001716;498:0.001486;504:0.001486;505:0.001487;508:0.001491;511:0.001486;513:0.001488;517:0.001486;518:0.001486;519:0.001486;525:0.001488;527:0.001486;533:0.001486;534:0.001486;537:0.001486;539:0.002104;541:0.001486;542:0.001531;543:0.001486;544:0.001517;545:0.005938;546:0.001486;547:0.001486;548:0.001513;549:0.001486;550:0.001514;554:0.001486;557:0.001488;558:0.001515;561:0.001512;567:0.001486;570:0.001486;571:0.001486;576:0.002787;577:0.008049;578:0.001959;579:0.001486;582:0.001677;588:0.001486;591:0.001486;594:0.001489;596:0.001486;598:0.001518;599:0.001486";
		final String feature2String = "1415_168620;0;0.0015384615;0:0.002180;1:0.001539;2:0.001539;3:0.003401;4:0.002702;6:0.002137;7:0.001560;8:0.001546;9:0.001545;10:0.001613;11:0.002030;12:0.002837;14:0.001659;15:0.001581;17:0.001539;18:0.001919;19:0.001620;20:0.002479;21:0.001538;22:0.001548;23:0.003799;24:0.001545;25:0.001555;26:0.001562;27:0.006835;28:0.001562;29:0.005861;30:0.001547;31:0.002704;32:0.001659;35:0.001553;36:0.001652;37:0.001646;38:0.001538;39:0.001555;40:0.002695;41:0.001640;42:0.001706;44:0.001611;45:0.002248;46:0.001543;47:0.001814;49:0.002034;50:0.001949;51:0.001552;52:0.001830;53:0.002514;54:0.001854;55:0.001664;56:0.001538;57:0.006326;58:0.002826;59:0.002956;60:0.001581;61:0.001600;62:0.002762;64:0.001547;65:0.001539;66:0.002206;67:0.002125;68:0.002127;69:0.001544;70:0.002740;71:0.001593;72:0.001549;74:0.001573;75:0.001749;76:0.002761;77:0.001638;78:0.001576;80:0.001543;81:0.001602;82:0.002876;83:0.001641;84:0.001641;85:0.001879;86:0.001972;88:0.001725;89:0.001548;90:0.001550;91:0.003723;93:0.001561;94:0.002086;95:0.001750;97:0.001584;98:0.001539;99:0.001609;100:0.004010;101:0.002205;102:0.001561;103:0.001627;104:0.002221;105:0.001540;106:0.001538;107:0.001543;109:0.006006;110:0.001670;111:0.005467;112:0.001556;114:0.001555;116:0.001542;117:0.001546;118:0.001550;119:0.001541;120:0.001546;121:0.001542;122:0.001538;124:0.001547;129:0.001539;130:0.001551;132:0.001886;145:0.001538;150:0.001538;151:0.001538;152:0.001541;153:0.001539;155:0.001540;156:0.001562;158:0.001541;159:0.001538;161:0.001538;162:0.001538;163:0.001539;167:0.001538;169:0.001544;170:0.001539;171:0.001540;173:0.001538;175:0.001538;179:0.001539;181:0.001654;182:0.001542;187:0.001538;188:0.001539;189:0.001538;195:0.001544;199:0.002149;200:0.001538;201:0.001539;203:0.001797;210:0.002343;213:0.001538;217:0.001538;223:0.001539;227:0.001552;228:0.001538;229:0.001892;230:0.001538;231:0.001539;232:0.001581;237:0.001564;242:0.001539;248:0.001538;251:0.001538;253:0.001538;258:0.001538;259:0.001539;264:0.001539;265:0.001538;266:0.001706;271:0.001539;274:0.001538;278:0.001539;283:0.001543;284:0.001749;286:0.001538;289:0.001553;290:0.001547;293:0.001539;294:0.001539;295:0.001584;296:0.001539;298:0.001912;301:0.001538;302:0.001538;304:0.001539;308:0.001544;310:0.001573;316:0.001644;319:0.001542;323:0.001840;329:0.001538;333:0.001538;337:0.001538;342:0.001541;343:0.001538;345:0.001539;351:0.001538;361:0.001538;362:0.001538;363:0.001538;364:0.001538;366:0.001538;368:0.001538;370:0.001545;371:0.001538;375:0.001764;378:0.001538;396:0.002579;398:0.001538;403:0.001538;406:0.001575;410:0.003332;417:0.001539;418:0.001538;422:0.001538;423:0.001538;424:0.001539;425:0.001538;429:0.001540;430:0.001542;431:0.001538;432:0.001538;433:0.001538;436:0.001538;439:0.001538;440:0.002366;442:0.001539;444:0.001539;448:0.002073;449:0.001555;453:0.001538;455:0.001610;458:0.001542;460:0.001542;461:0.001538;462:0.001538;463:0.001551;469:0.001538;470:0.001644;471:0.001538;472:0.001538;473:0.001538;476:0.001538;481:0.001542;482:0.001539;483:0.001620;486:0.001590;488:0.001538;489:0.001538;490:0.002362;492:0.001538;497:0.001544;498:0.001538;500:0.001538;504:0.001538;506:0.001538;509:0.001558;511:0.001562;512:0.001538;513:0.002574;516:0.001538;518:0.001538;519:0.001812;520:0.001539;522:0.001538;525:0.001539;527:0.001538;528:0.001538;529:0.001538;533:0.001539;534:0.002998;537:0.001539;539:0.002132;541:0.001652;543:0.001538;544:0.001538;545:0.005104;546:0.001538;547:0.001770;550:0.001541;554:0.001539;557:0.001538;558:0.001538;560:0.001563;561:0.001811;565:0.001538;571:0.001538;572:0.001539;574:0.001539;575:0.001539;576:0.001821;577:0.002093;578:0.001539;588:0.002316;590:0.001538;594:0.001539;599:0.001538";
		// final String feature1String = "1_1;0;1;1:1";
		// final String feature2String = "1_2;0;0;1:0";

		Feature f1 = Feature.parse(feature1String);
		Feature f2 = Feature.parse(feature2String);

		IMetric l2MetricSiret = new L2MetricSiret();
		try {
			float dist = l2MetricSiret.dist(f1, f2);
			System.out.println(dist);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static void PerformanceTest() {

		// final String feature1String =
		// "1_1;0;0;278:0.006650;279:0.000360;289:0.010648;290:0.000577;398:0.014091;399:0.026221;400:0.000372;409:0.004822;410:0.017268;411:0.000595;509:0.001538;510:0.000062;519:0.037567;520:0.078302;521:0.002148;530:0.014018;531:0.017666;532:0.000382;542:0.000009;543:0.000003;629:0.002110;630:0.010831;631:0.000438;640:0.022424;641:0.231261;642:0.039497;643:0.001121;651:0.015147;652:0.171801;653:0.061997;654:0.010215;663:0.000202;664:0.041469;665:0.017059;675:0.000480;676:0.000843;750:0.001979;751:0.006606;761:0.002436;762:0.013319;763:0.009324;764:0.001025;772:0.000317;773:0.012745;774:0.033620;775:0.008640;785:0.032394;786:0.015414;796:0.000445;797:0.000782;1729:0.000015;1730:0.000014;1740:0.000006;1741:0.000005;1840:0.000000;1841:0.000000;1850:0.000056;1851:0.000064;1852:0.000001;1861:0.000021;1862:0.000020;1863:0.000000;1961:0.000001;1962:0.000000;1972:0.000044;1973:0.000015;1983:0.000001;1984:0.000001;1995:0.000076;1996:0.000165;2006:0.000005;2007:0.000011;2116:0.000070;2117:0.000153;2127:0.000005;2128:0.000010";
		// final String feature2String =
		// "1_2;0;0;640:0.019610;641:0.097448;642:0.003038;651:0.023640;652:0.130955;653:0.004412;662:0.005274;663:0.025747;761:0.018415;762:0.091779;763:0.002892;772:0.047671;773:0.247716;774:0.004200;783:0.021766;784:0.106261;1971:0.003245;1972:0.030231;1973:0.002217;1982:0.002758;1983:0.034979;1984:0.003219;2092:0.003046;2093:0.028583;2094:0.002110;2103:0.002590;2104:0.033133;2105:0.003065";

		final String feature1String = "232_230887;1;0.0016583748;1:0.001658;4:0.001659;6:0.001658;7:0.001659;8:0.001658;16:0.001658;17:0.001658;22:0.001658;30:0.001658;32:0.001660;35:0.001658;36:0.001658;42:0.001659;44:0.001658;46:0.001658;54:0.001658;55:0.001658;58:0.001658;60:0.001658;63:0.001658;65:0.001658;71:0.001658;74:0.001675;76:0.001658;78:0.001658;82:0.001658;83:0.001753;84:0.001658;86:0.001662;89:0.001658;91:0.003182;98:0.001658;101:0.001660;109:0.001658;117:0.001658;118:0.001658;119:0.001658;121:0.001658;126:0.001658;147:0.002210;274:0.001658;306:0.001658;322:0.001659;353:0.001679;375:0.001674;377:0.002210;394:0.001661;411:0.002210;455:0.001658;469:0.001658;484:0.001658;507:0.001658;510:0.003295;540:0.001658;563:0.001659;565:0.001658;579:0.001658;588:0.001658;599:0.001658";
		final String feature2String = "521_69924;1;0.0016611295;6:0.001661;7:0.001661;8:0.001661;16:0.001661;17:0.001661;20:0.001661;22:0.001661;35:0.001661;36:0.001661;42:0.001661;44:0.001661;54:0.001661;55:0.001661;58:0.001661;60:0.001661;65:0.001661;74:0.001661;76:0.001661;78:0.001661;82:0.001661;86:0.001661;89:0.001661;98:0.001661;109:0.001661;117:0.001661;118:0.001661;119:0.001661;126:0.001661;147:0.001661;274:0.001662;306:0.001666;322:0.001661;353:0.001684;377:0.001661;384:0.001661;394:0.001661;411:0.001661;455:0.001661;507:0.002489;510:0.003298;540:0.002489;563:0.001661;565:0.001661;579:0.001661;599:0.001661";

		Feature f1 = Feature.parse(feature1String);
		Feature f2 = Feature.parse(feature2String);

		IMetric l2MetricSiret = new L2MetricSiret();

		float dist = 0, previousDist = 0;
		try {
			previousDist = l2MetricSiret.dist(f1, f2);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		// 10^9 ~ 360s (6 mins)
		// GMM 600 10^6 ~ 1s
		final int numberOfDC = 10000000;

		long begin = System.currentTimeMillis();
		for (int i = 0; i < numberOfDC; i++) {
			try {
				dist = (i % 2) == 0 ? l2MetricSiret.dist(f1, f2) : l2MetricSiret.dist(f2, f1);
				if (dist != previousDist) {
					throw new IOException("Wrong L2 metric computation");
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		System.out.println(dist);
		long end = System.currentTimeMillis();
		double second = (end - begin) / 1000d;
		System.out.println(numberOfDC + " distance computations takes " + second);
	}
}
